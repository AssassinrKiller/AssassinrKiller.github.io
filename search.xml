<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>内存管理笔记</title>
      <link href="/2023/08/29/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/29/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="TaggedPointer-指针"><a href="#TaggedPointer-指针" class="headerlink" title="TaggedPointer 指针"></a>TaggedPointer 指针</h3><ul><li>指针地址 + 值 </li><li>怎么区分 taggedPointer ，在第 0 位的标识是1 代表是 taggedPointer 指针</li><li>第 1 ~ 3 位的值标识 tagType, </li><li>不需要执行 retain &amp; release 方法，存放在常量区，系统控制释放<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">OBJC_TAG_NSAtom            = <span class="number">0</span>,</span><br><span class="line">OBJC_TAG_1                 = <span class="number">1</span>,</span><br><span class="line">OBJC_TAG_NSString          = <span class="number">2</span>,</span><br><span class="line">OBJC_TAG_NSNumber          = <span class="number">3</span>,</span><br><span class="line">OBJC_TAG_NSIndexPath       = <span class="number">4</span></span><br><span class="line">OBJC_TAG_NSManagedObjectID = <span class="number">5</span>,</span><br><span class="line">OBJC_TAG_NSDate            = <span class="number">6</span>，</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="retain"><a href="#retain" class="headerlink" title="retain"></a>retain</h3><ol><li><p>传入的参数有 isa_t ，判断不是 nonpointer 类型的 isa，直接操作 SideTables<br><strong>sidetables 不是一张表，如果只有一张，全局对象都需要多线程访问，效率底下，又不能一个对象一张表</strong></p><blockquote><p>模拟器是64张，真机是8张，源码中显示的限制</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sturct SideTable &#123;</span><br><span class="line">    spinlock_t lock;         // 自旋锁</span><br><span class="line">    RefcountMap refcnts;     // 引用计数表</span><br><span class="line">    weak_table_t weak_table; // 弱引用表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断是否正在释放</p></li><li><p>从 isa 中找到 extra_rc 的位置，引用计算 +1 ，如果 extra_rc 满了不够用了，需要创建 sideTable 并在 extra_rc 标记，</p><blockquote><p>为什么会吧 extra_rc 的数据一半放入散列表，为了在后续 retain &amp; release 操作的时候尽可能不访问散列表，（开锁解锁耗时）</p></blockquote></li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSObject *obj = [NSObject alloc];</span><br><span class="line">NSLog(@&quot;%ld&quot;,CFGetRetainCount((__bridge CFTypeRef)obj))</span><br><span class="line">//这个打印值为1 </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="autorelease"><a href="#autorelease" class="headerlink" title="autorelease"></a>autorelease</h3><ol><li>autoReleasePool </li><li>autoreleasepage 存放指针的栈结构</li><li>page 与 page 之间是双向链表结构</li><li>和线程有关系</li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> AutoreleasePoolPage;</span><br><span class="line"><span class="keyword">struct</span> AutoreleasePoolPageData</span><br><span class="line">&#123;</span><br><span class="line">magic_t <span class="keyword">const</span> magic;</span><br><span class="line">__<span class="keyword">unsafe_unretained</span> <span class="type">id</span> *next;</span><br><span class="line">pthread_t <span class="keyword">const</span> thread;</span><br><span class="line">AutoreleasePoolPage * <span class="keyword">const</span> parent;</span><br><span class="line">AutoreleasePoolPage *child;</span><br><span class="line">uint32_t <span class="keyword">const</span> depth;</span><br><span class="line">uint32_t hiwat;</span><br><span class="line"></span><br><span class="line">AutoreleasePoolPageData(__<span class="keyword">unsafe_unretained</span> <span class="type">id</span>* _next, pthread_t _thread, AutoreleasePoolPage* _parent, uint32_t _depth, uint32_t _hiwat)</span><br><span class="line">: magic(), next(_next), thread(_thread),</span><br><span class="line">  parent(_parent), child(<span class="literal">nil</span>),</span><br><span class="line">  depth(_depth), hiwat(_hiwat)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>magic 用来验证 autoreleasePoolPage 的结构是否完整</li><li>next 指向最新添加的 autorelease 对象的下一个位置，初始化时指向 begin()</li><li>thread 指当前线程</li><li>parent 指向父结点，第一个 page 的父结点指向 nil</li><li>child 指向子结点，最后一个 page 的子结点指向 nil</li><li>depth 表示深度，从 0 开始，往后递增 1</li><li>hiwat 是 high water mark 最大入栈数量标记</li></ul><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><h4 id="压栈过程-push"><a href="#压栈过程-push" class="headerlink" title="压栈过程(push)"></a>压栈过程(push)</h4><ol><li>一个 autoreleasepool 多个 page 只有一个哨兵对象，放在最开始的位置，为了在 pop 的时候存在边界</li><li>在 @autoreleasepool 在 push 的时候，先放入一个哨兵对象，创建一个 page ，并标记当前为 hotPage</li><li>后续再添加对象入栈，如果满了就创建 child page ，继续压栈；</li></ol><h4 id="出栈过程-pop"><a href="#出栈过程-pop" class="headerlink" title="出栈过程(pop)"></a>出栈过程(pop)</h4><p>1.顺序是和出栈相反，do while 循环，从 child 往 parent 的方向，向 page 里面的对象发送 release 消息，直到找到 parent 为空的 page 并且找到哨兵对象停止，其中一次销毁 page 对象</p><h3 id="runloop"><a href="#runloop" class="headerlink" title="runloop"></a>runloop</h3><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><ol><li>runloop 是什么？<blockquote><p>__CFRunLoop 是一个结构体<br>一个 runloop 对象对应多个 runloopMode 一个 mode 对应多个 modeItem ,item 可以是 timer &amp; source &amp; observer</p></blockquote></li></ol><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> __CFRunLoop &#123;</span><br><span class="line">    <span class="built_in">CFRuntimeBase</span> _base;</span><br><span class="line">    pthread_mutex_t _lock;            <span class="comment">/* locked for accessing mode list */</span></span><br><span class="line">    __CFPort _wakeUpPort;            <span class="comment">// used for CFRunLoopWakeUp</span></span><br><span class="line">    Boolean _unused;</span><br><span class="line">    <span class="keyword">volatile</span> _per_run_data *_perRunData;              <span class="comment">// reset for runs of the run loop</span></span><br><span class="line">    pthread_t _pthread;</span><br><span class="line">    uint32_t _winthread;</span><br><span class="line">    <span class="built_in">CFMutableSetRef</span> _commonModes;</span><br><span class="line">    <span class="built_in">CFMutableSetRef</span> _commonModeItems;</span><br><span class="line">    <span class="built_in">CFRunLoopModeRef</span> _currentMode;</span><br><span class="line">    <span class="built_in">CFMutableSetRef</span> _modes;</span><br><span class="line">    <span class="keyword">struct</span> _block_item *_blocks_head;</span><br><span class="line">    <span class="keyword">struct</span> _block_item *_blocks_tail;</span><br><span class="line">    <span class="built_in">CFAbsoluteTime</span> _runTime;</span><br><span class="line">    <span class="built_in">CFAbsoluteTime</span> _sleepTime;</span><br><span class="line">    <span class="built_in">CFTypeRef</span> _counterpart;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>runloop 能干什么？</li><li>runloop 和线程之间的关系</li></ol><ul><li>从 getMainRunLoop 源码中得出，主线程的 runloop 和主线程对应，是一个全局字典的方式映射存储的，key 是线程，value 是 CFRunloopRef 对象</li><li></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ObjC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>符号与链接</title>
      <link href="/2023/08/14/%E7%AC%A6%E5%8F%B7%E4%B8%8E%E9%93%BE%E6%8E%A5/"/>
      <url>/2023/08/14/%E7%AC%A6%E5%8F%B7%E4%B8%8E%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="1-多环境配置"><a href="#1-多环境配置" class="headerlink" title="1.多环境配置"></a>1.多环境配置</h3><h4 id="1-1多-target-配置"><a href="#1-1多-target-配置" class="headerlink" title="1.1多 target 配置"></a>1.1多 target 配置</h4><h4 id="1-2多-scheme-配置"><a href="#1-2多-scheme-配置" class="headerlink" title="1.2多 scheme 配置"></a>1.2多 scheme 配置</h4><h3 id="2-xcconfig-文件冲突解决"><a href="#2-xcconfig-文件冲突解决" class="headerlink" title="2.xcconfig 文件冲突解决"></a>2.xcconfig 文件冲突解决</h3><p>1.使用 xcode 创建 xcconfig 文件，类似 pod 中使用的配置文件；<br>2.xcconfig 文件可以直接添加到 build setting 配置项；<br>语法介绍：<br>key-value 的方式；<br>对应字段名称 xcodebuildsettings.com 网站查询；<br>在 target -&gt; build Setting 添加配置项，不会被 xcconfig 文件全量覆盖；</p><h3 id="3-Mach-o-与链接器"><a href="#3-Mach-o-与链接器" class="headerlink" title="3.Mach-o 与链接器"></a>3.Mach-o 与链接器</h3><p>mach-o 二进制代码 + 配置文件（header）<br>脚本：<br>objcdump –macho –private-headers [path]</p><p>怎样在 xcode 运行项目后，在中断控制台上输出脚本；</p><p>在 xcode -&gt; build Phases 添加 run script </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//1.获取终端窗口的路劲 tty</span><br><span class="line">~ tty</span><br><span class="line">/dev/ttys003</span><br><span class="line"></span><br><span class="line">//2.在 run script 脚本里面添加 </span><br><span class="line">echo &quot;xuhuan&quot; &gt; /dev/ttys003</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-符号的种类预作用"><a href="#4-符号的种类预作用" class="headerlink" title="4.符号的种类预作用"></a>4.符号的种类预作用</h3><h3 id="5-strips-命令"><a href="#5-strips-命令" class="headerlink" title="5.strips 命令"></a>5.strips 命令</h3>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
